/*
 * Created on May 2, 2007
 * 
 * Copyright 2007 (c) NewsBank, Inc.
 * All Rights Reserved
 */
package com.newsbank.permuter.net;

import org.apache.http.HttpEntity;
import org.apache.http.StatusLine;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/*
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.charset.Charset;
*/

public class HttpRequest
	{
	private static final int kMaxTotalConnection	=	100;
	private static final int kMaxConnPerRoute		=	100;
	
	private static final Log kLogger = LogFactory.getLog(HttpRequest.class);
	
	private static PoolingHttpClientConnectionManager	s_httpConnManager;
	private static CloseableHttpClient s_httpClient;
	
	static
		{
		s_httpConnManager = new PoolingHttpClientConnectionManager();
		s_httpConnManager.setMaxTotal(kMaxTotalConnection);
		s_httpConnManager.setDefaultMaxPerRoute(kMaxConnPerRoute);
        
        s_httpClient = HttpClients.custom().setConnectionManager(s_httpConnManager).build();
		}
	
	private static CloseableHttpClient getClient()
		{
		return s_httpClient;
		}
	
	public static void shutdown()
		{
		s_httpConnManager.shutdown();
		}
	
    public static final String doGetRequest(String inRequest)
    	throws Throwable
    	{
    	return doGetRequest(inRequest, new StringBuilder());
    	}
	
    //create POST request map with all mappings of url component 
    public static final String doGetRequest(String inRequest, StringBuilder inBuilder)
    	throws Throwable
    	{
    //	kLogger.debug("INREQUEST: "+inRequest);
    	String result=null;
    	
    	HttpGet theGetRequest = new HttpGet(inRequest);
    	CloseableHttpResponse theHttpResponse = null;
    	try
    		{
    		theHttpResponse =  getClient().execute(theGetRequest);
            StatusLine theStatusLine = theHttpResponse.getStatusLine();
            if (theStatusLine.getStatusCode() < 300)
            	{
                HttpEntity theEntity = theHttpResponse.getEntity();
                if (theEntity != null)
                	{
                	result=EntityUtils.toString(theEntity, "UTF-8");
                    EntityUtils.consumeQuietly(theEntity);
                	/*
                    ContentType theContentType = ContentType.getOrDefault(theEntity);
                    theContentType.withCharset(Charset.forName("UTF-8"));
                    Charset theCharSet = theContentType.getCharset();
                    
                    Reader theReader = new InputStreamReader(theEntity.getContent(), theCharSet);
                    result = readFully(theReader, inBuilder).toString();
                    */
                	}
                else
    				kLogger.debug("no entity returned for: " + inRequest);
            	}
    		}
    	
    	catch(Throwable theErr)
    		{
    		//fix; takeoutquotes from inRequest
    		kLogger.fatal("inRequest", theErr);
    		}
    	
    	finally 
    		{
    		theHttpResponse.close();
    		}
    
    	return result;
    	}

    public static final String doPostRequest(String inRequest, String inBody)
        	throws Throwable
        	{
        	return doPostRequest(inRequest, inBody, new StringBuilder());
        	}

    // body is assumed to already be encoded
    public static final String doPostRequest(String inRequest, String inBody, StringBuilder inStringBuilder)
    	throws Throwable
    	{
    		String result=null;
    		
    		//kLogger.debug("INREQUEST: "+inRequest);
    		//kLogger.debug("BODY: "+inBody);

    		HttpPost thePostRequest = new HttpPost(inRequest);
    		CloseableHttpResponse theResponse = null;
    		try
    			{
    			thePostRequest.setEntity(new StringEntity(inBody, ContentType.APPLICATION_FORM_URLENCODED));

    			//Execute and get the response
    			theResponse = getClient().execute(thePostRequest);
    			HttpEntity entity = theResponse.getEntity();
    			if (entity != null)
    				{
                	result=EntityUtils.toString(entity, "UTF-8");
                    EntityUtils.consumeQuietly(entity);
    				/*
    				ContentType theContentType = ContentType.getOrDefault(entity);
    				theContentType.withCharset(Charset.forName("UTF-8"));
    				Charset theCharSet = theContentType.getCharset();
    				Reader theReader = null;
    				try
    					{
    					theReader = new InputStreamReader(entity.getContent(), theCharSet);
    					result = readFully(theReader, inStringBuilder).toString();
    					}
    				catch(Throwable theErr)
    					{
    					//fix; takeoutquotes from inRequest
    					kLogger.error("inRequest", theErr);
    					}
    				finally
    					{
    					theReader.close();
    					}
    				*/
    				}
    			else
    				kLogger.debug("no entity returned for: " + inBody);
    			}
    		catch(Throwable theErr)
    			{
    			//fix; takeoutquotes from inRequest
    			kLogger.error("inRequest", theErr);
    			}
    		finally
    			{
    			theResponse.close();
    			}
    		
    		return result;
  			}
    
/*
    private static StringBuilder readFully( Reader input, StringBuilder inBuilder) 
    	throws IOException
    	{
    	BufferedReader bufferedReader = input instanceof BufferedReader ? (BufferedReader)input : new BufferedReader( input);
    	StringBuilder result = inBuilder;
    	if (result == null)
    		result = new StringBuilder();
    	
    	char[] buffer = new char[4 * 1024];
    	int charsRead;
    	while( (charsRead = bufferedReader.read( buffer)) != -1)
    		{
    		result.append( buffer, 0, charsRead);
    		}
    	return result;
    	}
*/
	}
