package com.newsbank.permuter.permutation;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import org.apache.commons.lang3.StringUtils;
//import org.apache.log4j.Logger;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import com.newsbank.permuter.PermutedResult;
import com.newsbank.permuter.net.GatewaySearch;
import com.newsbank.permuter.types.Person;
import com.newsbank.permuter.types.Relations;
import com.newsbank.permuter.types.Terms;

public class FormPermuter extends AbstractPermutation {

	//private final static Logger kLogger = Logger.getLogger(FormPermuter.class);
	private String extraQuery = null;

	public Relations process(String fileData)
	{
		Relations r = new Relations();

		SAXBuilder builder = new SAXBuilder();

		try
		{
		 Document document = (Document) builder.build(new StringReader(fileData));

		 //root element (personSearch)
			Element rootNode = document.getRootElement();
			handleNode(rootNode);

			Set<String> primaryKeys = new HashSet<String>();
			String primKey = null;
			int num = 0;
   
			@SuppressWarnings("unchecked")
			List<Element> primList = rootNode.getChildren("primary");
			
			if(rootNode.getChild("gateway") != null)
			{
				extraQuery = rootNode.getChildText("gateway").trim();
				if (rootNode.getChild("scorelimit") != null)
				{
					extraQuery = extraQuery + "&scorelimit=" + Integer.parseInt(rootNode.getChildText("scorelimit"));
				}
				if (rootNode.getChild("option") != null)
				{
					extraQuery = extraQuery + "&option=" + rootNode.getChildText("option");
				}
			}			

			if(rootNode.getChildren("primary").isEmpty()) 
			{
				Person primaryPerson = new Person();

				Element e = rootNode.addContent("primary");
				e.addContent("nameFirst");
				primaryPerson.setNameFirst(e.getChildText("nameFirst"));
				r.setPrimaries(e.getChildText("nameFirst"), primaryPerson);
				
			} else {
				
				for (int i = 0; i < primList.size(); i++) 
				{
					//handleNode(rootNode);
					Element node = primList.get(i);				
					Person primaryPerson = new Person();
					
					primaryPerson.setNameFirst(node.getChildText("nameFirst"));
					primaryPerson.setNameMid(node.getChildText("nameMid"));
					primaryPerson.setNameNick(node.getChildText("nameNick"));
					primaryPerson.setBirthLast(node.getChildText("birthLast"));
					primaryPerson.setNameLast(node.getChildText("nameLast"));
					primaryPerson.setRelationship(node.getChildText("relationship"));
					/*if (node.getChildText("gender") != null) {
						primaryPerson.setGender(Person.Gender.valueOf(node.getChildText("gender").toUpperCase()));
					}*/

					primKey = node.getChildText("nameFirst") + num++;
					primaryKeys.add(primKey);

					r.setPrimaries(primKey, primaryPerson);	
					//r = new Relations(primaryPerson);
				}
			}
			
			@SuppressWarnings("unchecked")
			List<Element> list = rootNode.getChildren("second");
			Iterator<Element> it1 = list.iterator();
			while (it1.hasNext()) 
			{
				Element node2 = (Element)it1.next();				
					
				Person secondaryPerson = new Person();
					
				secondaryPerson.setNameFirst(node2.getChildText("nameFirst"));
				secondaryPerson.setNameMid(node2.getChildText("nameMid"));
				secondaryPerson.setNameNick(node2.getChildText("nameNick"));
				secondaryPerson.setBirthLast(node2.getChildText("birthLast"));
				secondaryPerson.setNameLast(node2.getChildText("nameLast"));
				secondaryPerson.setRelationship(node2.getChildText("relationship"));
				/*if (node2.getChildText("gender") != null) {
					secondaryPerson.setGender(Person.Gender.valueOf(node2.getChildText("gender").toUpperCase()));
				}*/
				r.setRelatives(primKey, secondaryPerson);	
			}

			//trigger married name permutations --------------------------------------------------------------------------------
			//~~~~~~~a~~~~~~~~~~~~
			Iterator<String> primKeys = primaryKeys.iterator();
			List<Person> prims = new ArrayList<Person>();
			String pKey = null;
			while (primKeys.hasNext())
			{
				pKey = primKeys.next();
				prims = r.getPrimaries(pKey);
			
				for(int i = 0; i < prims.size(); i++) 
				{
					Person primPerson = prims.get(i);
					//if primary has a birthLast but not a nameLast 
					if( primPerson.getBirthLast() != null && primPerson.getNameLast() == null )
					{
						//for loop through secondaries
						List<Person> relList = r.getRelatives(primKey);
						for(Person rel : relList)
						{
							//see if any relatives are spouses and have a name last 
							if( ( rel.getRelationship().toUpperCase().contains("SPOUSE") || rel.getRelationship().toUpperCase().contains("WIFE") ||
									rel.getRelationship().toUpperCase().contains("HUSBAND") || rel.getRelationship().toUpperCase().contains("EX-WIFE") ||
									rel.getRelationship().toUpperCase().contains("EX-HUSBAND") || rel.getRelationship().toUpperCase().contains("FIANCE")||
									rel.getRelationship().toUpperCase().contains("DOMESTIC PARTNER") ) && rel.getNameLast()!=null )
							{
								//grab spouses' last name and add to primary person nameLast if there is only one spouse
								if(relList.size() == 1)
								{
									primPerson.setNameLast(rel.getNameLast());
								}
								//if there are more than one spouses create new primary person
								else 
								{
									int numb = 0;
									if(!rel.getNameLast().equals(primPerson.getBirthLast())) 
									{
										Person person = new Person();
										if(primPerson.getNameFirst()!=null)
										{
											person.setNameFirst(primPerson.getNameFirst());
										}
										if(primPerson.getNameMid()!=null)
										{
											person.setNameMid(primPerson.getNameMid());
										}
										if(primPerson.getNameNick()!=null)
										{
											person.setNameNick(primPerson.getNameNick());
										}
										person.setBirthLast(primPerson.getBirthLast());
										person.setNameLast(rel.getNameLast());	
										
										//add new person to r
										r.setPrimaries("key"+numb, person);
										numb ++;
									}
								}
							}
						}	
					}
					//~~~~~~~b~~~~~~~~~~~~
					//for loop through secondaries
					if( primPerson.getNameLast() != null )
					{
						List<Person> relList = r.getRelatives(primKey);
						for(Person rel : relList)
						{
							//see if any relatives are spouses and have a birthLast that is not the same at primary nameLast 
							if( ( rel.getRelationship().toUpperCase().contains("SPOUSE") || rel.getRelationship().toUpperCase().contains("WIFE") ||
									rel.getRelationship().toUpperCase().contains("HUSBAND") || rel.getRelationship().toUpperCase().contains("EX-WIFE") ||
									rel.getRelationship().toUpperCase().contains("EX-HUSBAND") || rel.getRelationship().toUpperCase().contains("FIANCE")||
									rel.getRelationship().toUpperCase().contains("DOMESTIC PARTNER") ) && rel.getNameLast()==null
									&& rel.getBirthLast()!=null && !primPerson.getNameLast().equals(rel.getBirthLast()))
							{
								rel.setNameLast(primPerson.getNameLast());
							}
						}
					}
				}
			}
			
			//-------------------------------------------------------------------------------------------
			
			//getTerms and add them to terms ArrayList 
			List<?> termsList = rootNode.getChildren("terms");
			String termString = null;
			for (int a = 0; a < termsList.size(); a++) 
			{	
				Element termsNode = (Element) termsList.get(a);

				//go inside Terms and get all term elements
				List <?> inTerms = termsNode.getChildren("term");
				Terms terms = new Terms();
				
				for (int x = 0; x < inTerms.size(); x++) 
				{
					Element inNode = (Element) inTerms.get(x);
					termString = inNode.getText();
					//take out any quotation
					if(termString.contains("\""))
					{
						termString = termString.replace("\"", "");
					}
					terms.addTerm(termString);
					r.setTerms("all",terms);								
				}
			}
			//handleNode(rootNode);
		}catch (Throwable io) {
				io.printStackTrace(System.err);
			 } 
		return r;
	}

	public String permute(Relations r) 
	{
		StringBuilder trip= new StringBuilder();
		StringBuilder init = new StringBuilder();
		StringBuilder onear = new StringBuilder();
		List<String> spouses = new ArrayList<String>();

	 	String nameFirst = null;
		String nameMid = null;
		String nameNick = null;
		String birthLast = null;
		String nameLast = null;
	 	String fNameFirst = null;
		//String fNameNick = null;
	 	String fBirthLast = null;
		String fNameLast = null;
		//Gender gender = null;
		char nameFirstInitial = 0;
		char nameMidInitial = 0;
		char birthLastInitial = 0;
		String midInit = null;
		char midInit0 = 0;
		char sMnInit0 = 0;
		String sMnInit = null;
		String sMid = null;
		String sBlast = null;
		String theKey = null;
		String mid = null;
		String firstN = null;
		
		boolean first = false;
		if(extraQuery != null) 
		{
			trip.append(extraQuery);
		}
		trip.append("&p_field_primary-0=alltext&p_params_primary-0=weight:1&p_text_primary-0=(");

		//for loop to make this iterate through all the relatives in r
		Map <String, List<Person>> primaries = r.getPrimaries();
		Iterator<String> itPrimary=primaries.keySet().iterator();
		while (itPrimary.hasNext())
		{
			theKey = itPrimary.next();
			//kLogger.debug("Relatives:" + theKey);
			
			List<Person> personList = primaries.get(theKey);
			for(Person primary : personList)
			{
		 	nameFirst = primary.getNameFirst();
			nameMid = primary.getNameMid();
			nameNick = primary.getNameNick();
			birthLast = primary.getBirthLast();
			nameLast = primary.getNameLast();
			//gender = primary.getGender();

			//get initials of certain names
			if(nameFirst != null) 
			{
				//take out any quotation
				if(nameFirst.contains("\""))
				{
					nameFirst = nameFirst.replace("\"", "");
				}
				nameFirst = removePer(nameFirst);
				nameFirstInitial = nameFirst.charAt(0);
			}
			if(nameMid != null) 
			{
				//take out any quotation
				if(nameMid.contains("\""))
				{
					nameMid = nameMid.replace("\"", "");
				}
				nameMid = removePer(nameMid);
				nameMidInitial = nameMid.charAt(0);
				sMid = Character.toString(nameMidInitial);
			}
			if(birthLast != null) 
			{
				//take out any quotation
				if(birthLast.contains("\""))
				{
					birthLast = birthLast.replace("\"", "");
				}
				birthLast = removePer(birthLast);
				birthLastInitial = birthLast.charAt(0);
				sBlast = Character.toString(birthLastInitial);
			}
			//take out any quotation
			if(nameLast != null && nameLast.contains("\""))
			{
				nameLast = nameLast.replace("\"", "");
			}
			nameLast = removePer(nameLast);
			//take out any quotation
			if(nameNick != null && nameNick.contains("\""))
			{
				nameNick = nameNick.replace("\"", "");
			}
			nameNick = removePer(nameNick);
			
			//if nameMid has more than one parts 
			String nameMids = null;
			if(nameMid != null && nameMid.contains(" "))
			{
				String [] nm = nameMid.split(" ");
				StringBuilder nm2= new StringBuilder();
				
				for(int i = 0; i < nm.length; i++) 
				{
					nm2.append(nm[i].charAt(0) + " ");
				}
				nameMids = nm2.toString();
			}
			
			//set up for coupleRefs
			if ( first == false) 
			{
				fNameFirst = nameFirst;
				fBirthLast = birthLast;
				fNameLast = nameLast;

				/*if (nameNick != null) {
					fNameNick = nameNick;
				}*/
			}

			first = true;
			//===================================================
			//start building primary person trip
			//===================================================
			//if a primary person only has first name nothing will be output
			
			//if primary has everything but nameFirst
			if (nameFirst == null) 
			{
				if(nameMid != null && birthLast != null && nameLast != null) 
				{
					trip.append("\""+nameMid+ " " +birthLast+ "\"");
					trip.append("\""+nameMid+ " " +nameLast+ "\"");
					
					if (!birthLast.equals(sBlast) && nameMid.length() > 1) 
					{
						trip.append("\""+nameMid+ " " +birthLastInitial+ " " +nameLast+ "\"");
					}
					if(nameNick != null) 
					{
					   	trip.append("\"" +nameNick+ " " + birthLast+ "\"");	
					   	trip.append("\"" +nameNick+ " " + nameLast+ "\"");	
					}
				}
				
				else if (nameMid != null && birthLast != null || nameLast != null) 
				{
					if(nameMid != null && birthLast != null) 
					{
						trip.append("\""+nameMid+ " " +birthLast+ "\"");

						if(nameNick != null) 
						{
						   	trip.append("\"" +nameNick+ " " + birthLast+ "\"");	
						}
					}
					else if (nameMid != null && nameLast != null) 
					{
						trip.append("\""+nameMid+ " " +nameLast+ "\"");

						if(nameNick != null) 
						{
						   	trip.append("\"" +nameNick+ " " + nameLast+ "\"");	
						}
					}
				}
			}

			//person ONLY has a either LAST names; takes last name from the first primary person
			if(primary.nameCount() == -3 && nameFirst == null && nameMid == null) 
			{
				if (nameLast != null && birthLast != null) 
				{
					trip.append("\""+birthLast+"\""+ " OR " +"\""+nameLast+ "\"");
				}
				else if (birthLast != null) 
				{
					trip.append("\"" +birthLast+ "\"");
				}
				else if (nameLast != null) 
				{
					trip.append("\"" +nameLast+ "\"");
				}
			}
			
			//person has a nameFirst && birthLast	
			if (primary.nameCount() == 2 && nameFirst != null && birthLast != null) 
			{
				if(nameFirst.length()>1) {
					init.append("\""+nameFirst + "\" ONEAR/2 \"" + birthLast+ "\" OR ");
					trip.append("\"" + nameFirst + " " + birthLast+ "\"");
					//trip.append("\"" + nameFirst + "\" ONEAR/1 ? ONEAR/1 \"" + birthLast+ "\"");
				
					//init
				   	init.append("\"" +birthLast + " " + nameFirst+ "\"");	
				}
				   	if (nameNick != null) 
				   	{
					   	trip.append("\"" +nameNick+ " " + birthLast+ "\"");	
				   	}
				}
			
			//person has a nameFirst && nameLast
				else if (primary.nameCount() == 2 && nameFirst!= null && nameLast != null) 
				{
					if(nameFirst.length()>1)
					{
						init.append("\""+nameFirst + "\" ONEAR/2 \"" + nameLast+ "\" OR ");
						trip.append("\"" + nameFirst + " " + nameLast+ "\"");
						//trip.append("\"" + nameFirst + "\" ONEAR/1 ? ONEAR/1 \"" + nameLast+ "\"");
						
						//init
					   	init.append("\"" +nameLast + " " + nameFirst+ "\"");	
						}
				   	if (nameNick != null) 
				   	{
					   	trip.append("\"" +nameNick+ " " + nameLast+ "\"");
				   	}
				}

				//person has 3 names and one of the last names will be null
				if (primary.nameCount() == 3 && nameFirst != null && nameMid != null) 
				{				   	
				   	if (birthLast != null) 
				   	{
				   		if(nameFirst.length()>1) {
				   			trip.append("\"" + nameFirst + " " + birthLast+ "\"");
				   			//init
					   		init.append("\"" +birthLast + " " + nameFirst+ "\"");	
				   		}
					   	trip.append("\"" +nameFirst + " " + nameMid+ " " + birthLast+ "\"");	
					   	
					   	//J W Spencer ******************
					   	init.append("\"" +nameFirstInitial + " " + nameMidInitial+ " " + birthLast+ "\"");
					   	
					   	if(!nameMid.equals(sMid) && nameFirst.length() > 1) 
					   	{
					   		trip.append("\"" +nameFirst + " " + nameMidInitial+ " " + birthLast+ "\"");
					   		trip.append("\"" +nameFirstInitial + " " + nameMid+ " " + birthLast+ "\"");
					   		if(nameMids != null) 
					   		{
					   			trip.append("\"" +nameFirst + " " + nameMids + birthLast+ "\"");
					   		}
					   	}
					   	
					   	if (nameNick != null) 
					   	{
						   	trip.append("\"" +nameNick+ " " + birthLast+ "\"");
					   	} 	
				   	}
				   	
				   	if (nameLast != null ) 
				   	{
				   		if(nameFirst.length()>1) {
							trip.append("\"" + nameFirst + " " + nameLast+ "\"");
							//init
						   	init.append("\"" +nameLast + " " + nameFirst+ "\"");	
					   		}
					   	trip.append("\"" +nameFirst + " " + nameMid+ " " + nameLast+ "\"");	
					   	
					   	//J W Spencer ******************
					   	init.append("\"" +nameFirstInitial + " " + nameMidInitial+ " " + nameLast+ "\"");
					   	
					   	if (!nameMid.equals(sMid) && nameFirst.length() > 1) 
					   	{
					   		trip.append("\"" +nameFirst + " " + nameMidInitial+ " " + nameLast+ "\"");
						   	trip.append("\"" +nameFirstInitial + " " + nameMid+ " " + nameLast+ "\"");	
					   		if(nameMids != null) 
					   		{
					   			trip.append("\"" +nameFirst + " " + nameMids+ nameLast+ "\"");
					   		}
					   	}
					   	if (nameNick != null) 
					   	{
						   	trip.append("\"" +nameNick+ " " + nameLast+ "\"");
					   	} 	
				   	}
				}
				
				//person has 3 part name but no middle name 
				if (primary.nameCount() == 3 && nameFirst != null && nameMid == null) 
				{
					if(nameFirst.length()>1) {
						trip.append("\"" + nameFirst + " " + birthLast+ "\"");
						//trip.append("\"" + nameFirst + "\" ONEAR/1 ? ONEAR/1 \"" + birthLast+ "\""); //maybe
						trip.append("\"" + nameFirst + " " + nameLast+ "\"");
						//trip.append("\"" + nameFirst + "\" ONEAR/1 ? ONEAR/1 \"" + nameLast+ "\""); //maybe
						//init
					   	init.append("\"" +nameLast + " " + nameFirst+ "\"");
						}
					if (!birthLast.equals(sBlast) && nameFirst.length() > 1) 
					{
						trip.append("\"" +nameFirst + " " + birthLastInitial+ " " + nameLast+ "\"");
					}
					
					//J W Spencer ******************
					init.append("\"" +nameFirstInitial + " " + birthLastInitial+ " " + nameLast+ "\"");
					
				   	if (nameNick != null) 
				   	{
					   	trip.append("\"" +nameNick+ " " + nameLast+ "\"");
					   	trip.append("\"" +nameNick+ " " + birthLast+ "\"");
				   	} 	
				}

				//person has 4 part name
				if (primary.nameCount() == 4 ) 
				{
					if(nameFirst.length()>1)
					{
						trip.append("\"" +nameFirst + " " + birthLast+ "\"");	
						trip.append("\"" +nameFirst + " " + nameLast+ "\"");
						//init
						init.append("\"" +nameLast + " " + nameFirst+ "\"");	
					}
					if (!birthLast.equals(sBlast) && nameFirst.length() > 1) 
					{				
						trip.append("\"" +nameFirst + " " + birthLastInitial+ " " + nameLast+ "\"");
					}
					
					//J W Spencer ******************
					init.append("\"" +nameFirstInitial + " " + birthLastInitial+ " " + nameLast+ "\"");
					
					trip.append("\"" + nameFirst+ " " + nameMid + " " + birthLast + "\"");
					if(nameMid.length() > 1) 
					{
						trip.append("\"" + nameFirstInitial+ " " + nameMid + " " + birthLast + "\"");
					}
					trip.append("\"" + nameFirst+ " " + nameMid + " " + nameLast + "\"");
					if(nameMid.length() > 1) 
					{
						trip.append("\"" + nameFirstInitial+ " " + nameMid + " " + nameLast + "\"");
					}
					
					//J W Spencer ******************
					init.append("\"" + nameFirstInitial+ " " + nameMidInitial + " " + birthLast + "\"");
					init.append("\"" + nameFirstInitial+ " " + nameMidInitial + " " + nameLast + "\"");
					
					if (!nameMid.equals(sMid) && nameFirst.length() > 1) 
					{
						trip.append("\"" + nameFirst+ " " + nameMidInitial + " " + birthLast + "\"");
						trip.append("\"" + nameFirst + " " + nameMidInitial+ " " + nameLast+ "\"");
				   		if(nameMids != null) 
				   		{
				   			trip.append("\"" +nameFirst + " " + nameMids+ birthLast+ "\"");
				   			trip.append("\"" +nameFirst + " " + nameMids+ nameLast+ "\"");
				   		}

					}
					
				   	if (nameNick != null) 
				   	{
					   	trip.append("\"" +nameNick+ " " + nameLast+ "\"");
					   	trip.append("\"" +nameNick+ " " + birthLast+ "\"");
				   	} 	
				}
			}
		}
		trip.append(")");
		String str1 = trip.toString().substring(trip.indexOf("(") +1, trip.indexOf(")"));
		String str2 = deleteDup(str1,nameFirst,nameLast,birthLast);

		if(!init.toString().isEmpty()) 
		{
			trip.append("&p_bool_primary-1=OR&p_field_primary-1=alltext&p_params_primary-1=weight:0&p_text_primary-1=(" +
		init + ")");
		}
		
		//===================================================
		//start building PRIMARY couple ref 
		//===================================================
		String [] all = {"Wife", "Husband", "Spouse", "Ex-Wife","Ex-Husband", "Fiancé", "Domestic Partner"};
		StringBuffer onear2 = new StringBuffer();
		
		trip.append("&p_bool_primary-2=OR&p_field_primary-2=alltext&p_params_primary-2=weight:1&p_text_primary-2=(");
		if(!r.getRelatives().isEmpty()) 
		{
			//for loop to make this iterate through all the relatives in r
			Map <String, List<Person>> relatives = r.getRelatives();
			Iterator<String> it=relatives.keySet().iterator();
			while (it.hasNext())
			{
				String theKey2 = it.next();
				List<Person> personList = relatives.get(theKey2);
				for(Person relative : personList)
				{
					for (int a = 0; a < all.length; a++)	
					{
						if(relative.getRelationship()!=null) 
						{
							if(relative.getRelationship().toUpperCase().equals(all[a].toUpperCase())) 
							{
								mid = relative.getNameMid();
								if(mid != null) 
								{	//take out any quotation
									if(mid.contains("\""))
									{
										mid = mid.replace("\"", "");
									}
									mid = removePer(mid);
									midInit0 = relative.getNameMid().charAt(0);
									midInit = Character.toString(midInit0);
								}
	
								firstN = relative.getNameFirst();
								//take out any quotation
								if(firstN.contains("\""))
								{
									firstN = firstN.replace("\"", "");
								}
								firstN = removePer(firstN);
								
								//save spouses first & mid name(if available) to construct second coupleRefs
								if(mid != null) 
								{
									spouses.add(firstN+" "+ mid);
								}
								else
									spouses.add(firstN);
	
								//start forming coupleRefs
								if(nameFirst != null && firstN != null && nameLast != null) 
								{
									if(nameFirst.length()>1)
									{
										trip.append("\"" +nameFirst + " " + firstN + " " + nameLast+ "\"");
										trip.append("\"" +nameFirst + " and " + firstN + " " + nameLast+ "\"");
										//primary-3
										if(nameMid==null&&mid==null) 
										{
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3" + firstN  +"q0t3 ONEAR/2 q0t3"+ nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3and " + firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
										}
										if(nameMid==null) 
										{
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3" + firstN  +" "+ nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3and " + firstN + " " + nameLast+ "q0t3");
										}
										//new
										if(mid==null) 
										{
											onear2.append("q0t3" +nameFirst + " " + firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + " and " + firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
										}
									}
	
									if(nameMid != null) 
									{
										trip.append("\"" +nameFirst + " " + nameMid +" "+ firstN + " " + nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMid +" and "+ firstN + " " + nameLast+ "\"");
										//additional
										trip.append("\"" +nameFirst + " " + nameMidInitial +" "+ firstN + " " + nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMidInitial +" and "+ firstN + " " + nameLast+ "\"");
										//new
										if(mid==null) 
										{
											onear2.append("q0t3" +nameFirst + " " + nameMid +" "+ firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + " " + nameMid +" and "+ firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
											//missing one
											onear2.append("q0t3" +nameFirst + " " + nameMidInitial +" "+ firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + " " + nameMidInitial +" and "+ firstN + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
										}
									}
									if(mid != null&&nameFirst.length()>1) 
									{
										trip.append("\"" +nameFirst + " " + firstN + " " + mid +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " and " + firstN + " " + mid +" "+ nameLast+ "\"");
										//additional 
										trip.append("\"" +nameFirst + " " + firstN + " " + midInit +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " and " + firstN + " " + midInit +" "+ nameLast+ "\"");
										//primary-3
										if(nameMid==null) 
										{
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3" + firstN + " " + mid +" "+ nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3and " + firstN + " " + mid +" "+ nameLast+ "q0t3");
											//missing one
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3" + firstN + " " + midInit +" "+ nameLast+ "q0t3");
											onear2.append("q0t3" +nameFirst + "q0t3 ONEAR/2 q0t3and " + firstN + " " + midInit +" "+ nameLast+ "q0t3");
										}
									}
									if( mid != null && nameMid != null) 
									{
										trip.append("\"" +nameFirst + " " + nameMid +" "+ firstN + " " + mid +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMid +" and "+ firstN + " " + mid +" "+ nameLast+ "\"");
										//additional 
										trip.append("\"" +nameFirst + " " + nameMidInitial +" "+ firstN + " " + midInit +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMidInitial +" and "+ firstN + " " + midInit +" "+ nameLast+ "\"");
										//extra
										trip.append("\"" +nameFirst + " " + nameMid +" "+ firstN + " " + midInit +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMid +" and "+ firstN + " " + midInit +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMidInitial +" "+ firstN + " " + mid +" "+ nameLast+ "\"");
										trip.append("\"" +nameFirst + " " + nameMidInitial +" and "+ firstN + " " + mid +" "+ nameLast+ "\"");
									}
								}
							}
							//or here mid=null;
						}
						 mid=null;
					}
				}
			}
		}
		trip.append(")");
		String prim2 = deleteDup(trip.toString().substring(trip.indexOf("primary-2=(") + 11, trip.length()-1), nameFirst, nameLast, birthLast);
		
		if(trip.toString().contains("&p_bool_primary-2=OR&p_field_primary-2=alltext&p_params_primary-2=weight:1&p_text_primary-2=()")) 
		{
			trip.delete(trip.length() - 94, trip.length());
		}
		
		if(!onear2.toString().isEmpty()) 
		{
			trip.append("&p_bool_primary-3=OR&p_field_primary-3=alltext&p_params_primary-3=weight:0&p_text_primary-3=(" +
		onear2 + ")");
		}
			//===================================================
			//start building relatives trip
			//===================================================
			trip.append("&p_field_second-0=alltext&p_params_second-0=weight:1&p_text_second-0=(");	
			
			//for loop to make this iterate through all the relatives in r
			Map <String, List<Person>> relatives = r.getRelatives();
			Iterator<String> it=relatives.keySet().iterator();
			while (it.hasNext())
			{
				String theKey2 = it.next();
				//kLogger.debug("Relatives:" + theKey);
				
				List<Person> personList = relatives.get(theKey2);
				for(Person relative : personList)
				{
				String relNameFirst = relative.getNameFirst();
				String relNameMid = relative.getNameMid();
				String relNameNick = relative.getNameNick();
				String relNameLast = relative.getNameLast();
				String relBirthLast = relative.getBirthLast();
				//String relationship = relative.getRelationship();
				//Gender relGender = relative.getGender();
				char relNameMidInitial = 0;
				char relBirthLastInitial = 0;
				char relNameFirstInitial = 0;
				String sRelMid = null;
				String sRelBlast = null;
	
				//set initials & fix necessary names ==========================================================
				if(relNameFirst != null) 
				{
					//take out any quotation
					if(relNameFirst.contains("\""))
					{
						relNameFirst = relNameFirst.replace("\"", "");
					}
					relNameFirst = removePer(relNameFirst);
					relNameFirstInitial = relNameFirst.charAt(0);
				}
				if(relNameMid != null) 
				{
					//take out any quotation
					if(relNameMid.contains("\""))
					{
						relNameMid = relNameMid.replace("\"", "");
					}
					relNameMid = removePer(relNameMid);
					relNameMidInitial = relNameMid.charAt(0);
					sRelMid = Character.toString(relNameMidInitial);
				}
				if(relBirthLast != null) 
				{
					//take out any quotation
					if(relBirthLast.contains("\""))
					{
						relBirthLast = relBirthLast.replace("\"", "");
					}
					relBirthLast = removePer(relBirthLast);
					relBirthLastInitial = relBirthLast.charAt(0);
					sRelBlast = Character.toString(relBirthLastInitial);
				}
				//take out any quotation
				if(relNameLast != null && relNameLast.contains("\""))
				{
					relNameLast = relNameLast.replace("\"", "");
				}
				relNameLast = removePer(relNameLast);
				//take out any quotation
				if(relNameNick != null && relNameNick.contains("\""))
				{
					relNameNick = relNameNick.replace("\"", "");
				}
				relNameNick = removePer(relNameNick);
				//==========================================================
				
				//if nameMid has more than one parts 
				String relNameMids = null;
				if(relNameMid != null && relNameMid.contains(" ")) 
				{
					String [] nm = relNameMid.split(" ");
					StringBuilder nm2= new StringBuilder();
					
					for(int i = 0; i < nm.length; i++) 
					{
						nm2.append(nm[i].charAt(0) + " ");
					}
					relNameMids = nm2.toString();
				}
				
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~start forming name permutations~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				//person has EVERYTHING BUT NAMEFIRST
				if (relNameFirst == null) 
				{
					if(relNameMid != null && relBirthLast != null && relNameLast != null) 
					{
						trip.append("\""+relNameMid+ " " +relBirthLast+ "\"");
						trip.append("\""+relNameMid+ " " +relNameLast+ "\"");
						
						if (!birthLast.equals(sRelBlast) && relNameMid.length() > 1) 
						{
							trip.append("\""+relNameMid+ " " +relBirthLastInitial+ " " +relNameLast+ "\"");
						}
						if(relNameNick != null) 
						{
						   	trip.append("\"" +relNameNick+ " " + relBirthLast+ "\"");	
						   	trip.append("\"" +relNameNick+ " " + relNameLast+ "\"");	
						}
					}
					
					else if (relNameMid != null && relBirthLast != null || relNameLast != null) 
					{
						if(relNameMid != null && relBirthLast != null) 
						{
							trip.append("\""+relNameMid+ " " +relBirthLast+ "\"");
	
							if(relNameNick != null) 
							{
							   	trip.append("\"" +relNameNick+ " " + relBirthLast+ "\"");	
							}
						}
						else if (relNameMid != null && relNameLast != null) 
						{
							trip.append("\""+relNameMid+ " " +relNameLast+ "\"");
	
							if(relNameNick != null) 
							{
							   	trip.append("\"" +relNameNick+ " " + relNameLast+ "\"");	
							}
						}
					}
				}
				
				//person ONLY has a NICK name; takes last name from the first primary person
				if(relative.nameCount() == -1) 
				{
					if (fNameLast != null) 
					{
						trip.append("\"" +relNameNick+ " " + fNameLast+ "\"");
					}
					if (fBirthLast != null) 
					{
						trip.append("\"" +relNameNick+ " " + fBirthLast+ "\"");
					}
				}
	
				//person ONLY has a FIRST name; takes last name from the first primary person
				if(relative.nameCount() == 1 && relNameFirst != null && !relNameFirst.equals(fNameFirst) ) 
				{
					if (fNameLast != null) 
					{
						trip.append("\"" + relNameFirst + " " + fNameLast+ "\"");
						if(relative.getRelationship()!=null) 
						{
							if(relative.getRelationship().toUpperCase().equals("wife".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("husband".toUpperCase()) || 
									relative.getRelationship().toUpperCase().equals("spouse".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Ex-Wife".toUpperCase())|| 
									relative.getRelationship().toUpperCase().equals("Ex-Husband".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Fiancé".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Domestic Partner".toUpperCase())) 
							{
								onear.append("\"" + relNameFirst + "\" ONEAR/2 \"" + fNameLast+ "\"");
							}
						}
						if(relNameNick != null) 
						{
						   	trip.append("\"" +relNameNick+ " " + fNameLast+ "\"");
						}
					}
					if (fBirthLast != null ) 
					{
						trip.append("\"" + relNameFirst + " " + fBirthLast+ "\"");
						if(relative.getRelationship()!=null) 
						{
							if(relative.getRelationship().toUpperCase().equals("wife".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("husband".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("spouse".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Ex-Wife".toUpperCase())|| 
									relative.getRelationship().toUpperCase().equals("Ex-Husband".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Fiancé".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Domestic Partner".toUpperCase())) 
							{
								onear.append("\"" + relNameFirst + "\" ONEAR/2 \"" + fBirthLast+ "\"");
							}
						}
						if(relNameNick != null) 
						{
							trip.append("\"" +relNameNick+ " " + fBirthLast+ "\"");
						}
					}
				}
	
				//person ONLY has a MIDDLE name; takes last name from the first primary person
				if(relative.nameCount() == -2) 
				{
					if (fNameLast != null) 
					{
						trip.append("\"" + relNameMid + " " + fNameLast+ "\"");
	
						if(relNameNick != null) 
						{
						   	trip.append("\"" +relNameNick+ " " + fNameLast+ "\"");
						}
					}
					if (fBirthLast != null ) 
					{
						trip.append("\"" + relNameMid + " " + fBirthLast+ "\"");
						
						if(relNameNick != null) 
						{
							trip.append("\"" +relNameNick+ " " + fBirthLast+ "\"");
						}
					}
				}
				
				//person ONLY has either LAST names; takes last name from the first primary person
				if(relative.nameCount() == -3 && relNameFirst == null && relNameMid == null) 
				{
					if (relNameLast != null && relBirthLast != null) 
					{
						trip.append("\""+relBirthLast+"\""+ " OR " + "\""+relNameLast+ "\"");
					}
					else if (relBirthLast != null) 
					{
						trip.append("\"" +relBirthLast+ "\"");
					}
					else if (relNameLast != null) 
					{
						trip.append("\"" +relNameLast+ "\"");
					}
				}
	
				//person has a first and a middle name but no last name(s); grabs last name from the FIRST primary person
				if (relative.nameCount() == 2  && relNameFirst != null && relNameMid != null && relBirthLast == null && relNameLast == null) 
				{
					
					if (fNameLast != null) 
					{
						trip.append("\"" + relNameFirst + " " + fNameLast+ "\"");
						trip.append("\"" + relNameFirst + " " + relNameMid + " " + fNameLast+ "\"");
						if(relNameMid.length() > 1 ) 
						{
							trip.append("\"" + relNameFirstInitial + " " + relNameMid + " " + fNameLast+ "\"");
						}
						if (!relNameMid.equals(sRelMid) && relNameFirst.length() > 1) 
						{
							trip.append("\"" +relNameFirst + " " + relNameMidInitial+ " " + fNameLast+ "\"");	
						}
	
						if(relNameNick != null) 
						{
							trip.append("\"" +relNameNick+ " " + fNameLast+ "\"");
						}
					}
					
					if(fBirthLast != null) 
					{
						trip.append("\"" + relNameFirst + " " + fBirthLast+ "\"");
						trip.append("\"" + relNameFirst + " " + relNameMid + " " + fBirthLast+ "\"");
						if(relNameMid.length() > 1) 
						{
							trip.append("\"" + relNameFirstInitial + " " + relNameMid + " " + fBirthLast+ "\"");
						}
						if (!relNameMid.equals(sRelMid) && relNameFirst.length() > 1) 
						{
							trip.append("\"" +relNameFirst + " " + relNameMidInitial+ " " + fBirthLast+ "\"");	
						}
						
						if(relNameNick != null) 
						{
						   	trip.append("\"" +relNameNick+ " " + fBirthLast+ "\"");
						}
					}
				}
	
				//person has a nameFirst && birthLast	
				if (relative.nameCount() == 2 && relNameFirst != null && relBirthLast != null) 
				{
					trip.append("\"" + relNameFirst + " " + relBirthLast+ "\"");
					if(relative.getRelationship() != null )
					{
						if(relative.getRelationship().toUpperCase().equals("wife".toUpperCase()) ||
								relative.getRelationship().toUpperCase().equals("husband".toUpperCase()) || 
								relative.getRelationship().toUpperCase().equals("spouse".toUpperCase()) ||
								relative.getRelationship().toUpperCase().equals("Ex-Wife".toUpperCase())|| 
								relative.getRelationship().toUpperCase().equals("Ex-Husband".toUpperCase()) ||
								relative.getRelationship().toUpperCase().equals("Fiancé".toUpperCase()) ||
								relative.getRelationship().toUpperCase().equals("Domestic Partner".toUpperCase())) 
						{	
							onear.append("\"" + relNameFirst + "\" ONEAR/2 \"" + relBirthLast+ "\"");
						}
					}
					if (relNameNick != null) 
					{
						trip.append("\"" +relNameNick+ " " + relBirthLast+ "\"");
						}
					}
				
				//person has a nameFirst && nameLast				
					else if (relative.nameCount() == 2 && relNameFirst != null && relNameLast != null) 
					{
						trip.append("\"" + relNameFirst + " " + relNameLast+ "\"");
						if(relative.getRelationship() != null)
						{
							if(relative.getRelationship().toUpperCase().equals("wife".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("husband".toUpperCase()) || 
									relative.getRelationship().toUpperCase().equals("spouse".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Ex-Wife".toUpperCase())|| 
									relative.getRelationship().toUpperCase().equals("Ex-Husband".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Fiancé".toUpperCase()) ||
									relative.getRelationship().toUpperCase().equals("Domestic Partner".toUpperCase())) 
							{	
								onear.append("\"" + relNameFirst + "\" ONEAR/2 \"" + relNameLast+ "\"");
							}
						}
					   	if (relNameNick != null) 
					   	{
					   		trip.append("\"" +relNameNick+ " " + relNameLast+ "\"");
					   	}
					}
			
				//person has 3 names and one of the last names will be null
				if (relative.nameCount() == 3 && relNameFirst != null && relNameMid != null) 
				{				   	
				   	if (relBirthLast != null) 
				   	{
						trip.append("\"" + relNameFirst + " " + relBirthLast+ "\"");
					   	trip.append("\"" +relNameFirst + " " + relNameMid+ " " + relBirthLast+ "\"");	
					   	
					   	if(!relNameMid.equals(sRelMid) && relNameFirst.length() > 1) 
					   	{
					   		trip.append("\"" +relNameFirst + " " + relNameMidInitial+ " " + relBirthLast+ "\"");	
					   		trip.append("\"" +relNameFirstInitial + " " + relNameMid+ " " + relBirthLast+ "\"");	
					   		if(relNameMids != null) 
					   		{
					   			trip.append("\"" +relNameFirst + " " + relNameMids + relBirthLast+ "\"");
					   		}
					   	}
					   	
					   	if (relNameNick != null) 
					   	{
						   	trip.append("\"" +relNameNick+ " " + relBirthLast+ "\"");
					   	} 	
				   	}
				   	
				   	if (relNameLast != null ) 
				   	{
						trip.append("\"" + relNameFirst + " " + relNameLast+ "\"");
					   	trip.append("\"" +relNameFirst + " " + relNameMid+ " " + relNameLast+ "\"");
					   	
					   	if (!relNameMid.equals(sRelMid) && relNameFirst.length() > 1) 
					   	{
					   		trip.append("\"" +relNameFirst + " " + relNameMidInitial+ " " + relNameLast+ "\"");
						   	trip.append("\"" +relNameFirstInitial + " " + relNameMid+ " " + relNameLast+ "\"");
					   		if(relNameMids != null) 
					   		{
					   			trip.append("\"" +relNameFirst + " " + relNameMids + relNameLast+ "\"");
					   		}
					   	}
					   	if (relNameNick != null) 
					   	{
						   	trip.append("\"" +relNameNick+ " " + relNameLast+ "\"");
					   	} 	
				   	}
				}
	
				//person has 3 part name but no middle name 
				if (relative.nameCount() == 3 && relNameFirst != null && relNameLast != null && relBirthLast != null && relNameMid == null) 
				{
					trip.append("\"" + relNameFirst + " " + relBirthLast+ "\"");	
					trip.append("\"" + relNameFirst + " " + relNameLast+ "\"");
					
					if (!relBirthLast.equals(sRelBlast) && relNameFirst.length() > 1) 
					{
						trip.append("\"" +relNameFirst + " " + relBirthLastInitial+ " " + relNameLast+ "\"");
					}
					
				   	if (relNameNick != null) 
				   	{
					   	trip.append("\"" +relNameNick+ " " + relNameLast+ "\"");
					   	trip.append("\"" +relNameNick+ " " + relBirthLast+ "\"");
				   	} 	
				}
				
				//person has 4 part name
				if (relative.nameCount() == 4) 
				{
					trip.append("\"" +relNameFirst + " " + relBirthLast+ "\"");	
					trip.append("\"" +relNameFirst + " " + relNameLast+ "\"");
					
					if (!relBirthLast.equals(sRelBlast) && relNameFirst.length() > 1) 
					{				
						trip.append("\"" +relNameFirst + " " + relBirthLastInitial+ " " + relNameLast+ "\"");
					}
					
					trip.append("\"" + relNameFirst+ " " + relNameMid + " " + relBirthLast + "\"");
					if(relNameMid.length() > 1) 
					{
						trip.append("\"" + relNameFirstInitial+ " " + relNameMid + " " + relBirthLast + "\"");
					}
					trip.append("\"" + relNameFirst+ " " + relNameMid + " " + relNameLast + "\"");
					if(relNameMid.length() > 1) 
					{
						trip.append("\"" + relNameFirstInitial+ " " + relNameMid + " " + relNameLast + "\"");
					}
					
					if (!relNameMid.equals(sRelMid) && relNameFirst.length() > 1) 
					{
						trip.append("\"" + relNameFirst+ " " + relNameMidInitial + " " + relBirthLast + "\"");
						trip.append("\"" +relNameFirst + " " + relNameMidInitial+ " " + relNameLast+ "\"");
						
				   		if(relNameMids != null) 
				   		{
				   			trip.append("\"" +relNameFirst + " " + relNameMids + relBirthLast+ "\"");
				   			trip.append("\"" +relNameFirst + " " + relNameMids + relNameLast+ "\"");
				   			}
				   		}
					if (relNameNick != null) 
					{
						trip.append("\"" +relNameNick+ " " + relNameLast+ "\"");
						trip.append("\"" +relNameNick+ " " + relBirthLast+ "\"");
						} 	
					}
				}
			}
			
			trip.append(")");
			if(trip.toString().contains("&p_field_second-0=alltext&p_params_second-0=weight:1&p_text_second-0=()")) 
			{
				trip.delete(trip.length() - 71, trip.length());
			}
		
			if(onear.length() > 0) 
			{
			trip.append("second1Holder");
			}

			//===================================================
			//start building sec couple ref 
			//===================================================
			//populate
			StringBuffer onear3 = new StringBuffer();
			String spouse = null;
			String [] split;
			String sFn = null;
			String sMn = null;
			trip.append("&p_bool_second-2=OR&p_field_second-2=alltext&p_params_second-2=weight:1&p_text_second-2=(");
			
			for (int i = 0; i < spouses.size(); i++)
			{
				spouse = spouses.get(i).trim();
				if(spouse.contains(" ")) 
				{	
					if(spouse.contains("  "))
					{
						String spouse1=null;
						spouse1=spouse.replace("  ", " ");
						spouse=null;
						spouse=spouse1;
					}
					split = spouse.split(" ");
					sFn=split[0];
					sMn=split[1];
				}
				else
					sFn = spouse;
				
				//take out any quotation
				if(sFn.contains("\""))
				{
					sFn = sFn.replace("\"", "");
				}
				sFn = removePer(sFn);
				
				if(sMn != null) 
				{
					//take out any quotation
					if(sMn.contains("\""))
					{
						sMn = sMn.replace("\"", "");
					}
					sMn = removePer(sMn);
					sMnInit0 = sMn.charAt(0);
					sMnInit = Character.toString(sMnInit0);
				}


				if(nameFirst!= null && sFn != null && nameLast!=null) 
				{
					if(sFn.length()>1)
					{
						trip.append("\"" + sFn + " " + nameFirst+ " " + nameLast+ "\"");
						trip.append("\"" + sFn + " and " +  nameFirst + " " + nameLast+ "\"");
						//onear3
						if(sMn == null) 
						{
							onear3.append("q0t3" + sFn + "q0t3 ONEAR/2 q0t3" + nameFirst+ " " + nameLast+ "q0t3");
							onear3.append("q0t3" + sFn + "q0t3 ONEAR/2 q0t3and " +  nameFirst + " " + nameLast+ "q0t3");
						}
						if(nameMid == null && sMn == null) 
						{
							onear3.append("q0t3" + sFn + "q0t3 ONEAR/2 q0t3" + nameFirst+ "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
							onear3.append("q0t3" + sFn + "q0t3 ONEAR/2 q0t3and " +  nameFirst + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
						}
						//new
						if(nameMid == null) 
						{
							onear3.append("q0t3" + sFn + " " + nameFirst+ "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
							onear3.append("q0t3" + sFn + " and " +  nameFirst + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
						}
					
						if(nameMid != null) 
						{
							trip.append("\"" +sFn + " " +nameFirst + " " + nameMid +" "+  nameLast+ "\"");
							trip.append("\"" + sFn + " and "  +nameFirst + " " + nameMid +" "+ nameLast+ "\"");
							//additional
							trip.append("\"" +sFn + " " +nameFirst + " " + nameMidInitial +" "+  nameLast+ "\"");
							trip.append("\"" + sFn + " and "  +nameFirst + " " + nameMidInitial +" "+ nameLast+ "\"");
							//onear
							if(sMn==null) 
							{
								onear3.append("q0t3" +sFn + "q0t3 ONEAR/2 q0t3" +nameFirst + " " + nameMid +" "+  nameLast+ "q0t3");
								onear3.append("q0t3" + sFn + "q0t3 ONEAR/2 q0t3and "  +nameFirst + " " + nameMid +" "+ nameLast+ "q0t3");
								//missing one
								onear3.append("q0t3" +sFn + "q0t3 ONEAR/2 q0t3" +nameFirst + " " + nameMidInitial +" "+  nameLast+ "q0t3");
								onear3.append("q0t3" + sFn + "q0t3 ONEAR/2 q0t3and "  +nameFirst + " " + nameMidInitial +" "+ nameLast+ "q0t3");
							}
						}
					}
					
					if(sMn != null) 
					{
						trip.append("\"" + sFn + " "+ sMn +" "+nameFirst + " "  + nameLast+ "\"");
						trip.append("\"" + sFn + " "+ sMn +" and "+nameFirst + " " + nameLast+ "\"");
						//additional
						trip.append("\"" + sFn + " "+ sMnInit +" "+nameFirst + " "  + nameLast+ "\"");
						trip.append("\"" + sFn + " "+ sMnInit +" and "+nameFirst + " " + nameLast+ "\"");
						//new
						if(nameMid == null) 
						{
							onear3.append("q0t3" + sFn + " "+ sMn +" "+nameFirst + "q0t3 ONEAR/2 q0t3"  + nameLast+ "q0t3");
							onear3.append("q0t3" + sFn + " "+ sMn +" and "+nameFirst + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
							//missing one
							onear3.append("q0t3" + sFn + " "+ sMnInit +" "+nameFirst + "q0t3 ONEAR/2 q0t3"  + nameLast+ "q0t3");
							onear3.append("q0t3" + sFn + " "+ sMnInit +" and "+nameFirst + "q0t3 ONEAR/2 q0t3" + nameLast+ "q0t3");
						}
					}
					if( sMn != null && nameMid != null) 
					{
						trip.append("\"" + sFn + " " + sMn +" "+nameFirst + " " + nameMid +" "+ nameLast+ "\"");
						trip.append("\"" + sFn + " " + sMn +" and "+nameFirst + " " + nameMid +" "+ nameLast+ "\"");
						//additional
						trip.append("\"" + sFn + " " + sMnInit +" "+nameFirst + " " + nameMidInitial +" "+ nameLast+ "\"");
						trip.append("\"" + sFn + " " + sMnInit +" and "+nameFirst + " " + nameMidInitial +" "+ nameLast+ "\"");
						//extra
						trip.append("\"" + sFn + " " + sMn +" "+nameFirst + " " + nameMidInitial +" "+ nameLast+ "\"");
						trip.append("\"" + sFn + " " + sMn +" and "+nameFirst + " " + nameMidInitial +" "+ nameLast+ "\"");
						trip.append("\"" + sFn + " " + sMnInit +" "+nameFirst + " " + nameMid +" "+ nameLast+ "\"");
						trip.append("\"" + sFn + " " + sMnInit +" and "+nameFirst + " " + nameMid +" "+ nameLast+ "\"");						
					}
				}
				sMn = null;
			}
			
			trip.append(")");
			
			if(trip.toString().contains("&p_bool_second-2=OR&p_field_second-2=alltext&p_params_second-2=weight:1&p_text_second-2=()")) 
			{
				trip.delete(trip.length() - 90, trip.length());
			}

			if(!onear3.toString().isEmpty()) 
			{
				trip.append("&p_bool_second-3=OR&p_field_second-3=alltext&p_params_second-3=weight:0&p_text_second-3=(" +
			onear3 + ")");
			}
			//===================================================
			//start building terms trip
			//===================================================
			trip.append("&p_bool_second-4=OR&p_field_second-4=alltext&p_params_second-4=weight:1&p_text_second-4=(");
			
			List<Terms> termsList2 = r.getTerms("all");
			
			if(termsList2 != null) 
			{
				for(int i=0; i< termsList2.size(); i++)
				{
					Terms term = termsList2.get(i);
					
					List<String> termStr = term.getTerms();
					for(int x = 0; x < termStr.size();x++) 
					{
						String terms = termStr.get(x);
						
						//System.out.println(term.getTerm(i));
						String s = new String();
						String st = new String();

						//adding & or AND of terms that contain them
						if(!s.toLowerCase().equals(terms.toLowerCase()) && !st.toLowerCase().equals(terms.toLowerCase())) 
						{
							trip.append("\"" +terms+ "\"");
						}				
						
						if(!addAnd(terms, trip).equals("")) 
						{
							s = addAnd(terms, trip);

								trip.append("\"");
								s = s.replace("\"", "\"\"");
								trip.append(s + "\"");
						}
						
						if(!removePeriod(terms, trip).equals("")) 
						{
							st = removePeriod(terms, trip);

								trip.append("\"");
								st = st.replace("\"", "\"\"");
								trip.append(st + "\"");
						}
					}
				}
			}

			trip.append(")");
			
			if(trip.toString().contains("&p_bool_second-4=OR&p_field_second-4=alltext&p_params_second-4=weight:1&p_text_second-4=()")) 
			{
				trip.delete(trip.length() - 90, trip.length());
			}

			trip.append("&p_bool_second-5=OR&p_field_second-5=alltext&p_params_second-5=weight:0&p_text_second-5=(");

			StringBuilder t0 = new StringBuilder();
			t0.append(deleteDup(trip.toString(), nameFirst, nameLast, birthLast));

			t0.append(str2 + ")");
			
			StringBuilder t = new StringBuilder();
			//second-1 is down here so it doens't get affected by dedooping 
			if(t0.toString().contains("second1Holder")) 
			{
			t.append(t0.toString().replace("second1Holder","&p_bool_second-1=OR&p_field_second-1=alltext&p_params_second-1=weight:0&p_text_second-1=("+onear+")"));
			}
			else
				t.append(t0.toString());
			
			if(t.toString().contains("&p_bool_second-5=OR&p_field_second-5=alltext&p_params_second-5=weight:0&p_text_second-5=()")) 
			{
				t.delete(t.length()-91, t.length());
			}
			
			if(!init.toString().isEmpty()) 
			{
				t.append("&p_bool_second-6=OR&p_field_second-6=alltext&p_params_second-6=weight:0&p_text_second-6=(" +init+ ")");
			}
			if(prim2 != null && !prim2.equals("")) 
			{
				t.append("&p_bool_second-7=OR&p_field_second-7=alltext&p_params_second-7=weight:0&p_text_second-7=(" +prim2+ ")");
			}
			if(!onear2.toString().isEmpty()) 
			{
				t.append("&p_bool_second-8=OR&p_field_second-8=alltext&p_params_second-8=weight:0&p_text_second-8=(" +onear2+ ")");
			}
			char c = t.charAt(t.length()-1);
			String strC = String.valueOf(c);
			
			if(!strC.equals(")")) 
			{
				t.append(")");
			}
			
			StringBuilder t2 = new StringBuilder();
			StringBuilder triplets = new StringBuilder();
			
			String tee = t.toString().replaceAll("q0t3", "\"");
			t = new StringBuilder();
			t.append(tee);
			
			t2.append(addOr(t));
			
			String tpl = triplets.append(replaceAmp(t2)).toString();
			
			if(tpl.contains("  ")) 
			{
				String tpl2 = null;
				tpl2 = tpl.replace("  ", " ");
				tpl = null;
				tpl=tpl2;
			}
			
			return
					tpl;
	}

	//method to remove last period 
	public String removePer(String str) {
	    if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == '.') {
	        str = str.substring(0, str.length() - 1);
	    }
	    return str;
	}
	
    //method to delete duplicates
	private static String deleteDup(String trip, String nameFirst, String nameLast, String birthLast) 
	{
	   String triplets = trip;
	   
	   List<String> words = new ArrayList<String>();
	   List<String> phrases = new ArrayList<String>();
	   String word = null;
	   String phrase = null;
	   CharSequence target = null ;
	   String removed = null;
	   
       StringTokenizer st1 = new StringTokenizer(triplets, ")\""); 
       
       while(st1.hasMoreTokens()) 
       {
    	   word = st1.nextToken().trim();
    	   //kLogger.debug("PHRASE: "+word);
    	   words.add(word);
    	   }
       
       for(int i = 0; i < words.size(); i++) 
       {
    	   if(!words.get(i).equals(" ") && words.get(i).length() < 65) 
    	   {
    		   phrase = words.get(i);
	       phrases.add(phrase);
	       }
       }
       
       //if triplets contains any of the phrases in phrases remove from triplets
       for (int a = 0; a < phrases.size(); a ++) 
       {
	    	   String tripRev = new StringBuffer(trip).reverse().toString();
	    	   if(countNeedlesInHaystack( trip, "\""+phrases.get(a)+"\"") > 1)
	    	   {
	    		   target = phrases.get(a);
	    		   //add conditional to not check phrases that are just a persons nameFirst or nameLast or birthLast
	    		   if(!target.equals(nameFirst) && !target.equals(nameLast) && !target.equals(birthLast)) {
		    		   String targetRev = new StringBuffer(target).reverse().toString();
		    		   
			       removed = tripRev.replaceFirst(("\"" +targetRev+ "\""), "");
			       removed = new StringBuffer(removed).reverse().toString();
			       
			       trip = removed;
		    		   }
		   }
       }
       if(removed != null) 
       {
    			return removed;
       }
       else 
    	   return trip;
    }

	//method to add OR between phrases
	private static String addOr(StringBuilder trip) 
	{
		CharSequence target = "\"\"";
		CharSequence replacement = "\" OR \"";
		String newString = null;
		
		for(int i = 0; i < trip.length(); i++) 
		{
    			newString = trip.toString().replace(target, replacement);
    		}
    		return newString;
    }
	
	//method to add OR between phrases
	private static String replaceAmp(StringBuilder trip) 
	{
		CharSequence target = " & ";
		CharSequence replacement = " &amp; ";
		String newString = null;
		
		for(int i = 0; i < trip.length(); i++) 
		{
    			newString = trip.toString().replace(target, replacement);
    		}
    		return newString;
    }
	
	//method to eliminate any empty tags
    private static void handleNode(Element element) 
    {
        if (element.getChildren().size() == 0 && "".equals(element.getValue())) 
        {
        	element.getParent().removeContent(element);
            return;
        }
        // recurse the children
        for (int i = 0; i < element.getChildren().size(); i++) 
        { 
            handleNode((Element) element.getChildren().get(i));
        }
    }
    
    //method to take care of and/& variations 
    private static String addAnd(String string, StringBuilder trip) 
    {
    	String newString = null;

    		if(string.contains(" and ")) 
    		{	
    			newString = string.replace(" and ", " & ");
    			if(trip.toString().contains(newString)) 
    			{
    				newString = "";
    			}
    		}
    		else if(string.contains(" AND ")) 
    		{	
    			newString = string.replace(" AND ", " &amp; ");
    			if(trip.toString().contains(newString)) 
    			{
    				newString = "";
    			}
    		}
    		else if(string.contains(" & ")) 
    		{	
    			newString = string.replace(" & ", " and ");
    			if(trip.toString().contains(newString)) 
    			{
    				newString = "";
    			}
    		}
    		else 
    			newString = "";    		
    		
    		return newString;
    }

    //method to remove periods between letters 
    private static String removePeriod(String string, StringBuilder trip) 
    {
    	String newString = null;

    		if(string.contains(".")) {	
    			newString = string.replace(".", "");
    			if(trip.toString().contains(newString)) 
    			{
    				newString = "";
    			}
    		}
    		else 
    			newString = "";    		
    		
    		return newString;
    }
    
    /**method to take care of duplicate phrases split problem
    * How many times does the needle occur in the string 'haystack'?
    * @param haystack
    * @param needle
    * @return
    */
    public static int countNeedlesInHaystack(String haystack, String needle) {
        int retval = 0;
        int offset = 0;
        while( (offset = haystack.indexOf(needle, offset)) != -1 ) {
               retval += 1;
               offset += 1;
        }
        return retval;
    }
    
	@Override
	public PermutedResult convert(String inData, String inFormat) throws Throwable 
	{
		int theCount = 0;
		String option=null;
		String docInfo = null;
		String scorelimit=null;
		String gatewayResult = null;
		Relations r = process(inData);
		StringBuilder docrefs = new StringBuilder();
		StringBuilder docrefsFinal = new StringBuilder();
		String tripletData = this.permute(r)+"&searchLogtf=true";

		if (!StringUtils.isEmpty(extraQuery))
		{
			//remove scorelimit and option from gateway request then add it back to triplet data
			//so it can be used in rankEvidence
			if(extraQuery.contains("scorelimit"))
			{
				String [] eQuery = extraQuery.split("scorelimit");
				scorelimit="&scorelimit"+eQuery[1];
				String td = tripletData.replace(scorelimit, "");
				tripletData=null;
				tripletData=td;
			}
			if(extraQuery.contains("option"))
			{
				String [] eQuery = extraQuery.split("option");
				option="&option"+eQuery[1];
				String o = tripletData.replace(option, "");
				tripletData=null;
				tripletData=o;
			}
			//revome '-' if it got included in maxhits value
			if(tripletData.contains("maxhits=-")) 
			{
				String tdata = tripletData.replace("maxhits=-", "maxhits=");
				tripletData = null;
				tripletData = tdata;
			}
			
			// call the build URL w/triplet data and extra query; call gateway and return result
			GatewaySearch gs= new GatewaySearch();
			String url =null;
			GatewaySearch gsearch= new GatewaySearch();
			String url2 =null;
			
			//if rankEvidence is not needed do this ------------------------------------------------------------------------
			if(option!=null && (option.contains("norank") || option.contains("docref")) ) 
			{
				if(tripletData.contains("maxhits")) 
			 	{
					//make sure maxhits has the '-' in front since it is a fed call
					if(!tripletData.contains("maxhits=-")) 
					{
						String tdata=tripletData.replace("maxhits", "maxhits=-");
						tripletData = null;
						tripletData = tdata;
					}
					url=gs.getURL(tripletData + "&offset=1","fed");
			 		}
					else 
					{
						url=gs.getURL(tripletData + "&offset=1&maxhits=-120","fed");
					}
					//kLogger.debug("gateway fedsearch URL: "+url);
				
					// should split the pieces at the question mark
					int theQueryIndex = url.indexOf('?');
					gatewayResult = gs.getDocument(url.substring(0, theQueryIndex), url.substring(theQueryIndex+1));
				
					if(option.contains("docref")) 
					{
						SAXBuilder builder = new SAXBuilder();
						Document document = (Document) builder.build(new StringReader(gatewayResult));
					 
						Element resultList = document.getRootElement();
						Element fedtask = resultList.getChild("fedtask");
						Element result = fedtask.getChild("result");
						Element hitlist = result.getChild("hitlist");
						@SuppressWarnings("rawtypes")
						Iterator listIt = hitlist.getChildren("hit").iterator();
					 
						boolean b = false;
						//grab all docrefs (make sure there are hits first)
						if(!gatewayResult.contains("total=\"0\"")) 
						{
							while (listIt.hasNext()) 
							{
								Element hit = (Element) listIt.next();
								String docref = hit.getChildText("docref");
								if(b == true)
								{
									docrefs.append(",");
								}
								docrefs.append(docref);
								b = true;
							}
							docrefs.toString().substring(0,docrefs.length()-1);
	
							String [] arr = docrefs.toString().split(",");
							docrefsFinal.append("<docrefs>");
							for(int x = 0; x < arr.length;x++) 
							{
								theCount++;
								docrefsFinal.append("<docref>"+arr[x]+"</docref>");
							}
	
							docrefsFinal.append("<count>"+theCount+"</count>");
							docrefsFinal.append("</docrefs>");
							return new PermutedResult("text/plain", docrefsFinal.toString());
						}
						else
						{
							return new PermutedResult("text/xml;charset=UTF-8", "<docrefs>\n" + 
									"  <count>0</count>\n" + 
									"</docrefs>");
						}
					}
					else
						return new PermutedResult("text/plain", gatewayResult);
				}

			// ---------------------------------------------------------------------------------------------------------------
			else if (option != null && (option.contains("evidscore-cutoff") || option.contains("evidencescore"))) 
			{
				//eric's endpoint call
				if(tripletData.contains("maxhits")) 
				{
					url=gs.getURL(tripletData + "&sort=_rank_%3AD&offset=1","doc");
				}
				else 
				{
					url=gs.getURL(tripletData + "&sort=_rank_%3AD&offset=1&maxhits=120","doc");
				}
				//regular gateway call
				if(tripletData.contains("maxhits")) 
				{
					url2=gsearch.getURL(tripletData + "&sort=_rank_%3AD&offset=1","fed");
				}
				else 
				{
					url2=gsearch.getURL(tripletData + "&sort=_rank_%3AD&offset=1&maxhits=-120","fed");
				}
				//kLogger.debug("gateway fedsearch URL: "+url);
		
				// should split the pieces at the question mark
				int theQueryIndex = url.indexOf('?');
				int queryIndex = url2.indexOf('?');
				docInfo = gs.getDocument(url.substring(0, theQueryIndex), url.substring(theQueryIndex+1));
				gatewayResult = gs.getDocument(url2.substring(0, queryIndex), url2.substring(queryIndex+1));
				
				if(gatewayResult.isEmpty() || gatewayResult.contains("total=\"0\"") 
						|| docInfo.contains("count=\"0\"") || docInfo.isEmpty() )
				{
					GatewaySearch gs2= new GatewaySearch();
					String emptycall = gs2.getURL(tripletData ,"fed");
					int theQueryIndex2 = emptycall.indexOf('?');
					String gatewayResultEmpty = gs2.getDocument(emptycall.substring(0, theQueryIndex2), emptycall.substring(theQueryIndex2+1));
					return new PermutedResult("text/xml;charset=UTF-8", gatewayResultEmpty);
				}
				else 
				{
					String output = null;
					if(scorelimit != null && option != null) 
					{
						output = RankEvidence.process(gatewayResult, docInfo, tripletData+scorelimit+option);
					}
					else if (scorelimit != null) 
					{
						output = RankEvidence.process(gatewayResult, docInfo, tripletData+scorelimit);
					}	
					else if (option != null) 
					{
						output = RankEvidence.process(gatewayResult, docInfo, tripletData+option);
					}
					else if (scorelimit ==null && option == null) 
					{
						output = RankEvidence.process(gatewayResult, docInfo, tripletData);
					}
					return new PermutedResult("text/plain", output);
				}
			}
			// no options ---------------------------------------------------------------------------------------------------------------
			else {
				//eric's endpoint call
				if(tripletData.contains("maxhits")) 
				{
					url=gs.getURL(tripletData + "&sort=_rank_%3AD&offset=1","doc");
				}
				else 
				{
					url=gs.getURL(tripletData + "&sort=_rank_%3AD&offset=1&maxhits=120","doc");
				}

				//kLogger.debug("gateway fedsearch URL: "+url);
		
				// should split the pieces at the question mark
				int theQueryIndex = url.indexOf('?');
				docInfo = gs.getDocument(url.substring(0, theQueryIndex), url.substring(theQueryIndex+1));
				
				if(docInfo.isEmpty() || docInfo.contains("count=\"0\""))
				{
					GatewaySearch gs2= new GatewaySearch();
					String emptycall = gs2.getURL(tripletData ,"fed");
					int theQueryIndex2 = emptycall.indexOf('?');
					String gatewayResultEmpty = gs2.getDocument(emptycall.substring(0, theQueryIndex2), emptycall.substring(theQueryIndex2+1));
					return new PermutedResult("text/xml;charset=UTF-8", gatewayResultEmpty);
				}
				else 
				{
					String output = null;
					String gateway = null;
					if(scorelimit != null && option != null) 
					{
						output = RankEvidence.process(gateway, docInfo, tripletData+scorelimit+option);
					}
					else if (scorelimit != null) 
					{
						output = RankEvidence.process(gateway, docInfo, tripletData+scorelimit);
					}	
					else if (option != null) 
					{
						output = RankEvidence.process(gateway, docInfo, tripletData+option);
					}
					else if (scorelimit ==null && option == null) 
					{
						output = RankEvidence.process(gateway, docInfo, tripletData);
					}
					return new PermutedResult("text/plain", output);
				} 
			}
		}
		else
			return new PermutedResult("text/plain", tripletData);
	}
}